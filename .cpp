Сортировка выбором:
#include <iostream>   // Подключаем стандартную библиотеку ввода-вывода

using namespace std;  // Используем пространство имен std, чтобы избежать записи std:: перед каждым типом

// Функция для вывода содержимого массива
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {           // Проходим по каждому элементу массива
        cout << arr[i] << " ";                 // Выводим значение элемента массива
    }
    cout << endl;                              // Переход на новую строку после вывода всех элементов
}

// Основная функция сортировки выбором
void selectionSort(int arr[], int n) {
    int min_idx;                               // Переменная для хранения индекса минимального элемента

    // Внешний цикл проходит по массиву от начала до предпоследнего элемента
    for (int i = 0; i < n-1; i++) {
        min_idx = i;                           // Предполагаем, что первый элемент текущего участка массива является минимальным

        // Внутренний цикл ищет минимальный элемент начиная с следующей позиции
        for (int j = i+1; j < n; j++)
            if (arr[j] < arr[min_idx])         // Если найден новый минимум, запоминаем индекс нового минимума
                min_idx = j;
        
        // Меняем местами минимальный элемент и текущий элемент внешнего цикла
        swap(arr[min_idx], arr[i]);            // Стандартная библиотека STL предоставляет удобную функцию swap()
    }
}

// Главная функция программы
int main() {
    int arr[] = {64, 25, 12, 22, 11};          // Создаем пример массива целых чисел
    int n = sizeof(arr)/sizeof(arr[0]);        // Определяем размер массива (количество элементов)
    
    cout << "Исходный массив:\n";
    printArray(arr, n);                        // Выводим исходный несортированный массив

    selectionSort(arr, n);                     // Сортируем массив методом выбора

    cout << "\nОтсортированный массив:\n";
    printArray(arr, n);                        // Выводим отсортированный массив

    return 0;                                  // Завершаем программу успешно
}

Пример выполнения:

Исходный массив:
64 25 12 22 11 

Отсортированный массив:
11 12 22 25 64
