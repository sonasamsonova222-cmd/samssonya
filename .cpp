Сортировка выбором:
#include <iostream>   // Подключаем стандартную библиотеку ввода-вывода

using namespace std;  // Используем пространство имен std, чтобы избежать записи std:: перед каждым типом

// Функция для вывода содержимого массива
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {           // Проходим по каждому элементу массива
        cout << arr[i] << " ";                 // Выводим значение элемента массива
    }
    cout << endl;                              // Переход на новую строку после вывода всех элементов
}

// Основная функция сортировки выбором
void selectionSort(int arr[], int n) {
    int min_idx;                               // Переменная для хранения индекса минимального элемента

    // Внешний цикл проходит по массиву от начала до предпоследнего элемента
    for (int i = 0; i < n-1; i++) {
        min_idx = i;                           // Предполагаем, что первый элемент текущего участка массива является минимальным

        // Внутренний цикл ищет минимальный элемент начиная с следующей позиции
        for (int j = i+1; j < n; j++)
            if (arr[j] < arr[min_idx])         // Если найден новый минимум, запоминаем индекс нового минимума
                min_idx = j;
        
        // Меняем местами минимальный элемент и текущий элемент внешнего цикла
        swap(arr[min_idx], arr[i]);            // Стандартная библиотека STL предоставляет удобную функцию swap()
    }
}

// Главная функция программы
int main() {
    int arr[] = {64, 25, 12, 22, 11};          // Создаем пример массива целых чисел
    int n = sizeof(arr)/sizeof(arr[0]);        // Определяем размер массива (количество элементов)
    
    cout << "Исходный массив:\n";
    printArray(arr, n);                        // Выводим исходный несортированный массив

    selectionSort(arr, n);                     // Сортируем массив методом выбора

    cout << "\nОтсортированный массив:\n";
    printArray(arr, n);                        // Выводим отсортированный массив

    return 0;                                  // Завершаем программу успешно
}

Пример выполнения:

Исходный массив:
64 25 12 22 11 

Отсортированный массив:
11 12 22 25 64

СОРТИРОВКА СЛИЯНИЕМ:
#include <iostream>
using namespace std;

// Функция для объединения двух отсортированных подпоследовательностей
void merge(int arr[], int left, int mid, int right) {
    // Вычисляем размеры левой и правой подпоследовательностей
    int size_left = mid - left + 1;     // Размер левого сегмента
    int size_right = right - mid;       // Размер правого сегмента

    // Создаем временные массивы для хранения левой и правой частей
    int L[size_left];                   // Массив для левой части
    int R[size_right];                  // Массив для правой части

    // Копируем данные из оригинального массива в временные массивы
    for (int i = 0; i < size_left; ++i) {      // Копирование левой части
        L[i] = arr[left + i];
    }
    for (int j = 0; j < size_right; ++j) {     // Копирование правой части
        R[j] = arr[mid + 1 + j];
    }

    // Индексы временных массивов и общего массива
    int i = 0;                 // Индекс для левого временного массива
    int j = 0;                 // Индекс для правого временного массива
    int k = left;              // Индекс для основного массива

    // Объединяем обе подпоследовательности в общую последовательность
    while (i < size_left && j < size_right) {
        if (L[i] <= R[j]) {          // Если элемент слева меньше или равен элементу справа
            arr[k++] = L[i++];       // Добавляем элемент из левой части
        } else {
            arr[k++] = R[j++];       // Иначе добавляем элемент из правой части
        }
    }

    // Если остались элементы в левом массиве, копируем их
    while (i < size_left) {
        arr[k++] = L[i++];
    }

    // Если остались элементы в правом массиве, копируем их
    while (j < size_right) {
        arr[k++] = R[j++];
    }
}

// Рекурсивная функция сортировки
void mergeSort(int arr[], int left, int right) {
    if (left < right) {                      // Пока диапазон делится на части
        int mid = left + (right - left) / 2; // Срединный индекс диапазона

        // Сортируем левую половину
        mergeSort(arr, left, mid);

        // Сортируем правую половину
        mergeSort(arr, mid + 1, right);

        // Объединяем отсортированные половины
        merge(arr, left, mid, right);        // Выполняем объединение
    }
}

// Главная функция программы
int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};  // Исходный массив
    int n = sizeof(arr)/sizeof(arr[0]);         // Определяем размер массива

    cout << "Исходный массив: ";
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";                    // Печать исходного массива
    }
    cout << endl;

    // Вызываем процедуру сортировки
    mergeSort(arr, 0, n - 1);

    cout << "Отсортированный массив: ";
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";                     // Печать отсортированного массива
    }
    cout << endl;

    return 0;
}
ПРИМЕР ВЫПОЛНЕНИЯ:
Исходный массив: 64 34 25 12 22 11 90 
Отсортированный массив: 11 12 22 25 34 64 90 



